

==================================================
Урок 1. Проектирование архитектуры

Вопросы :

1. Как организовать клиент-серверное взаимодействие?
2. Как и в каком виде передавать файлы?
3. Как пересылать большие файлы?
4. Как пересылать служебные команды?
5. Что хранить в базе данных?
6. Как передавать структуру каталогов/файлов?
7. Какую библиотеку использовать для сетевого взаимодействия: java.io, java.nio, Netty?

==================================================

1. Как организовать клиент-серверное взаимодействие?
Взаимодействие клиента и сервера основывается на передаче сообщений


2. Как и в каком виде передавать файлы?
Файлы передаются в сериализованном виде


3. Как пересылать большие файлы?
Разбивать на небольшие блоки, в зависимости от оборудования,
оптимально для большинства случаев 1-2 Gb


4. Как пересылать служебные команды?
Служебные команды передаём так же как и обычные сообщения,
Для обмена сообщениями, можно применить паттерн проектирования Command
https://javarush.ru/groups/posts/1684-pattern-command-svoimi-slovami


5. Что хранить в базе данных?
В БД можно хранить в первую очередь,
пользователей, т.е. данные для авторизации,
другие данные пользователей и т.п.
Так же можно и служебную информацию для работы приложения,


6. Как передавать структуру каталогов/файлов?
Через FileChannel,
Ввиде пути (полный, относительный),
буферизировано ввиде байт-массива ByteBuffer



7. Какую библиотеку использовать для сетевого взаимодействия: java.io, java.nio, Netty?
java.io -- входит в стандартный пакет, самое простое решение,
но нужно самим организовывать синхронизацию и пр. параллельное взаимодействие.

java.nio -- небольшая обёртка над стандартным io,
чуть легче тем что решена проблема синхронизации.
Чуть сложнее простого io/
Одним потоком можно обрабатывать in/out.

Netty -- более производительный вариант.
Фреймворк, для большей масштабируемости и производительности.





